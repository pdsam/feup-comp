import static io.print(int) void;

class PicardIterative {

    public static void main(String[] args)
    {
        //var declaration * / & %
        int start_value;
        int end_value;
        int allowed_error;
        int temp;
        int count;

        int[] y1;
        int[] y2;
        int[] y3;

        /** var * attribution & $ # */
        start_value = 0;
        end_value = 30;
        allowed_error = 4;
        temp = start_value;
        count = 0;

        y1 = new int[30];
        y2 = new int[30];
        y3 = new int[30];

        while (temp < end_value) {

            y1[count] = 1 + temp + (temp * temp) / 2;
            y2[count] = 1 + temp + (temp * temp) / 2 + (temp * temp * temp) / 3 + (temp * temp * temp * temp )/ 8;
            y3[count] = 1 + (temp) + (temp * temp) / 2 + (temp * temp * temp) / 3 + (temp * temp * temp * temp ) / 8
                    + (temp * temp * temp * temp * temp ) / 15 + (temp * temp * temp * temp * temp * temp) / 48;

            count = count + 1;
            temp = temp + allowed_error;
        }

        // io.print("\nX\n");

        temp = start_value;

        while (temp < end_value) {
            //prints temp
            io.print(temp);
            temp = temp + allowed_error;
        }

        count = 0;
        temp = start_value;

        io.print(1);
        //io.print("\n\nY(1)\n");

        while(temp < end_value) {
              temp = temp + allowed_error;
              count = count + 1;
              io.print(y1[count]);

        }

        //io.print("\n\nY(2)\n");
        io.print(2);

        temp = start_value;
        count = 0;

        while (temp < end_value ) {

            io.print(y2[count]);
            temp = temp + allowed_error;
            count = count + 1;
        }

        //io.print("\n\nY(3)\n");
        io.print(3);

        temp = start_value;
        count = 0;

        while ( temp < end_value ) {

            io.print(y3[count]);
            temp = temp + allowed_error;
            count = count + 1;
        }


    }
}
